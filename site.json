{"title":"Senna.js","index":{"title":"Home","description":"A blazing fast Single Page Application engine","content":" Brought to you by Liferay, Inc Powered by WeDeploy™ ","srcFilePath":"src/pages/index.soy","url":"/.","children":[{"description":"Documentation description.","title":"Docs","content":" Docs Start learning how to leverage the power of Senna.js in your project. Search Choose a Guide Each one provides step by step coverage for every core element of Senna.js. ","srcFilePath":"src/pages/docs/index.soy","url":"/docs","children":[{"children":[{"description":"Installing Senna Guide","layout":"guide","title":"Installing Senna","category":"Getting Started","weight":1,"content":" Installing Senna Getting the Project To get started, download the project. This project includes an initial version of the project plus all of the Senna.js examples (source code dependencies that will help you get started). Unzip the project somewhere on your local drive. While you're working, you'll need a basic HTTP server to serve your pages because Senna will not be able to fully run if you simply open the files of your app in a browser. If you already have a local server ready to run, then skip to the Start using Senna.js in your app. Setting up a local server If you don't already have a server, http-server is a great solution. The easiest way to install http-server is via npm by running the following command in the command line. {literal} npm install http-server -g {/literal} This will install http-server. To run your local server, go to the directory that contains your app and run: {literal} http-server {/literal} Your app is now live at http://localhost:8080. Start using Senna.js in your app Setting up Senna.js is as easy as linking Senna.js to your document and adding data-senna and data-senna-surface as attributes to your `` element. {literal} Turbolinks Page 1 Page 2 {/literal} Now your page is already faster! By adding data-senna and data-senna-surface, we are telling the browser to replace just the body on each navigation and keep the rest of the resources instead of completly reloading a new page. ","srcFilePath":"src/pages/docs/gettingStarted/gettingStarted.md","url":"/docs/gettingStarted/gettingStarted.html"},{"description":"How It Works","layout":"guide","title":"How It Works","category":"Getting Started","weight":2,"content":" How Does It Work? 1. Initial page load When using Senna.js, your app will load all the background content, like css and script files, on the initial page load. They will be cached and used to speed up future navigation. 2. User clicks link to another page When the user clicks a link to another page of your app, Senna.js begins to work its magic, first by populating a new URL even though the page did not fully reload. Everything feels normal to your user because Senna.js supports the native browser capabilities. 3. Request is made for matching screen The request is made for the new page but instead of pulling down a completely new package of elements from the server, Senna.js utilizes the cached resources that are redundant to both the pages. 4. Screen paints surfaces with new content Quickly, Senna.js finds what content is new to the requested page and paints only the new content to the screen's surfaces, preventing your site from wasting time and bandwidth to download redundant resources. And voilà! Your app is now blazing fast! Not only is Senna.js a powerful, easy-to-use tool, it also provides plenty of control so you can tailor it to your project. Keep reading through the docs to learn more about how you can leverage the power of Senna.js in your app. ","srcFilePath":"src/pages/docs/gettingStarted/howdoesitwork.md","url":"/docs/gettingStarted/howdoesitwork.html"},{"description":"The Building Blocks","layout":"guide","title":"The Building Blocks","category":"Getting Started","weight":3,"content":" The Building Blocks App Think of this as your canvas. Everything about your site, namely your surfaces and routes, are contained within in this element. Surfaces The basic visual building blocks of your page. They are elements like your header, navbar, body, or footer. Screen The specific rendering of all relevant surfaces. Every-time a page is requested, the navigated path will match a respective screen. This matching screen will scan all surfaces and paint the new content for those surfaces. Every screen has a unique url, but does not load as a separate page. Route Every app navigation will consist of a route and a correlating screen. The route is the entire process of navigation, from when you click a link to when your app paints the new information on the screen. Native Browser Behavior In order to create a single page application with good perceived latency and good user experience, the SPA engine must handle many aspects of the browser’s native behavior. Here are some of the amazing capabilities of Senna.js. SEO & Bookmarkability: So if the browser is simply gathering more information rather than refreshing to a separate page, how do you make sure that your users can bookmark and share the content they are viewing? With Senna.js, your app will create specific urls that correlate to the information that your users are viewing. This not only makes it seamless for your users, but it also enables search engines to index that same information just like it would if it was a traditional webpage. Hybrid Rendering: Ajax + server-side rendering allows you to disable pushState at any time, enabling progressive enhancement. The way you render the server-side does not matter, it can be simple HTML fragments or even template views. State Retention: When you reload or navigate through the history of the page, Senna will take you right back to the state of the screen that you previously viewed, including the same scroll placement. UI Feedback: If you have large content on your page and it takes time to load, you can give your users feedback so they know the content will be fully loaded soon. Checkout UI Feedback to learn how to enable this feature in your app. Pending Navigation: To prevent multiple portions of your site from loading at different speeds, you can block UI rendering until the data is fully loaded so that all the content will display at once. In this situation, UI Feedback is a great tool to make sure your users know the content is coming. Timeout Detection: Senna.js will timeout if the request takes too long to load or if the user navigates to a different link while another request is pending. If an error occurs, Senna is already setup with Error Handling. History Navigation: By using History API, you can manipulate the browser history to use the browser's back and forward buttons. Cacheable Screens: Once you load a certain surface, this content is cached in memory and will be retrieved later on without any additional request to the server. Page Resources Management: Evaluate scripts and stylesheets from dynamic loaded resources. Additional content loaded using XMLHttpRequest can be appended to the DOM. For security reasons some browsers will not evaluate `` tags from the new fragment, so the SPA engine should handle extracting scripts from the content and parsing them, respecting the browser contract for loading scripts. ","srcFilePath":"src/pages/docs/gettingStarted/theBuildingblocks.md","url":"/docs/gettingStarted/theBuildingblocks.html"}],"description":"Getting Started","icon":"arrow-right-rod","layout":"guide","title":"Getting Started","weight":2,"url":"/docs/gettingStarted/gettingStarted.html","content":"","srcFilePath":"src/pages/docs/gettingStarted/index.md","location":"/docs/gettingStarted"},{"children":[{"description":"Screens Guide","layout":"guide","title":"Screens","category":"Fully Functional","weight":1,"content":" Screens Senna.HTMLScreen Senna.js provides a special type of route handler, or interface, called senna.Screen. This in itself is not an active class, rather, it merely defines the screen interface methods and demonstrates how to use the API. The real magic happens when we extend senna.Screen. We knew this might be a little tricky at first, so we creating our own extention: senna.HTMLScreen- the default screen we created to make Senna.js ready to work straight out of the box. How can you put Senna.HTMLScreen to work? We designed Senna to use senna.HTMLScreen as the default extension for all navigation so you can start using Senna without worrying about changing anything in your back end. But how do I start setting up my screens with senna.HTMLScreen? That's the thing, you already did! When you added data-senna and data-senna-surface to your document (see Getting Started), you told senna to route all the navigations through senna.HTMLScreen. Screens, screens, and more screens We want you to know how Senna works so that you can fully trust it to empower your app. Bellow are the cycle logs for senna.Screen. Feel free to look at them or even inspect your own browser console during a link navigation using Senna. You can also jump to Controlling Surfaces to learn more about how to customize screens on your app. {literal} Navigate to [/examples/mysite/pages/page1.html] Create screen for [/examples/mysite/pages/page1.html] Screen [screen_1408572719183] load XHR finished loading: GET \"http://localhost:8000/examples/mysite/pages/page1.html\". Screen [screen_1408572719183] add content to surface [header] Screen [screen_1408572719183] add content to surface [content] Screen [screen_1408572719183] flip Screen [screen_1408572719183] activate Navigation done {/literal} ","srcFilePath":"src/pages/docs/fullyFunctional/screens.md","url":"/docs/fullyFunctional/screens.html"},{"description":"Controlling Surfaces","layout":"guide","title":"Controlling Surfaces","category":"Fully Functional","weight":2,"content":" Controlling Surfaces How do you make sure Senna does exactly what you want? By default, Senna is setup to route every link to senna.HTMLScreen- the out-of-the-box screen that senna provides to handle navigation so you don't have to change anything in your existing back end. For most situations, this will be the ideal use of Senna because it is smart enough to know how to paint your surfaces with the new information when you navigate. But what if you want Senna to only be active during certain navigations? We make it easy for you to control what screens of your app interact with Senna and which ones do not. We call this Controlling Data Attributes. Taking control of your surfaces Once you have Senna fully running (see Getting Started if you are not sure), you can choose to limit Senna by controlling the data attributes. In order to limit your whole app from routing through senna.HTMLScreen, you can add ` to the head of your document. This will tell Senna to only route your specified paths through senna.HTMLScreen`. Your document would look like this: {literal} Senna - blazing fast apps Page 1 Page 2 Default content of my website. {/literal} You can also use RegEx to select multiple paths with one string. {literal} {/literal} ","srcFilePath":"src/pages/docs/fullyFunctional/controllingSurfaces.md","url":"/docs/fullyFunctional/controllingSurfaces.html"}],"description":"Fully Functional","icon":"code-file","layout":"guide","title":"Fully Functional","weight":3,"url":"/docs/fullyFunctional/screens.html","content":"","srcFilePath":"src/pages/docs/fullyFunctional/index.md","location":"/docs/fullyFunctional"},{"children":[{"description":"UI Feedback","layout":"guide","title":"UI Feedback","category":"Develop","weight":1,"content":" UI Feedback If you have large content on your page and it takes time to load, you can give your users feedback so they know the content is coming. 1. Add UI Feedback Senna comes with working UI feedback straight out of the box. All you have to do is add ` to the top of your `. {literal} UI Feedback {/literal} 2. Customize using CSS Now that you have added the default UI Feedback, you can edit the style of the animation inside of senna/src/senna.css. {literal} .senna-loading .senna-loading-bar { animation: shift-rightwards 1s ease-in-out infinite; animation-delay: .4s; display: block; } .senna-loading-bar { transform: translateX(100%); /* Change color of feedback bar */ background: #2fa4f5; display: none; height: 2px; left: 0; position: fixed; right: 0; top: 0; z-index: 10000; } {/literal} ","srcFilePath":"src/pages/docs/develop/uiFeedback.md","url":"/docs/develop/uiFeedback.html"},{"description":"Error Handling Guide","layout":"guide","title":"Error Handling","category":"Develop","weight":2,"content":" Error Handling Error Handling It's important to understand how to handle errors when using Senna.js. The three error handling options in Senna.js are Invalid Status, Request Error, and Timeout. Invalid Status: Returns true for an invalid status. Any status code 2xx or 3xx is considered valid. Request Error: Returns true if there was an error with the request. Timeout: Returns true if the request timed out. With just one simple funciton, you can control how your app handles those errors. {literal} var app = new senna.App(); app.on('endNavigate', function(event) { if (event.error) { if (event.error.invalidStatus) { //do something to handle invalid status } if (event.error.requestError) { //do something to handle an error with the request } if (event.error.timeout) { //do something to handle a timeout } if (event.error.statusCode == 404) { //return \"Page Not Found\" message } } }); {/literal} ","srcFilePath":"src/pages/docs/develop/errorHandling.md","url":"/docs/develop/errorHandling.html"},{"description":"Trackable Resources Guide","layout":"guide","title":"Trackable Resources","category":"Develop","weight":3,"content":" Trackable Resources Trackable Resources Senna.js provides an easy way to manage external style and script resources on the page. When including resources in the `, they can be annotated with the data-senna-track attribute. This attribute can be set to temporary or permanent`, which determines whether a resource remains on the page permanently or is removed after navigation; {literal} {/literal} ","srcFilePath":"src/pages/docs/develop/trackableResources.md","url":"/docs/develop/trackableResources.html"},{"description":"Routes Guide","layout":"guide","title":"Routes","category":"Develop","weight":4,"content":" Routes Routes As seen on the previous example, you can register senna.Route on senna.App. A route is a tuple containing a path and a handler function: {literal} var route = new senna.Route('/path/file.html', function() { // Fires when a link with path /path/file.html is clicked. }); {/literal} The path also supports strings, regular expressions or functions. {literal} var route = new senna.Route(/.*/, function() { // Fires when any link is clicked. }); {/literal} {literal} var resolvePath = function() { return '/path/file.html'; } var route = new senna.Route(resolvePath, function() { // Fires when a link with path /path/file.html is clicked. }); {/literal} From the handler callback you can update parts of your page, though it is hard to grow your application from a simple callback like this. For that reason, Senna.js provides senna.Screen. A screen is nothing more than a special type of route handler that provides an asynchronous lifecycle. The following section will detail how senna.Screen can help you manage your surfaces. ","srcFilePath":"src/pages/docs/develop/routes.md","url":"/docs/develop/routes.html"},{"description":"JavaScript APIs","layout":"guide","title":"JavaScript APIs","category":"Develop","weight":5,"content":" JavaScript APIs Full control using JavaScript APIs It's easy to create your own screen whenever you want. Let's say for example that you need a screen that injects the content \"Header changed\" and \"Body changed\" on the respective surface elements when you navigate to the path /foo. {literal} function FooScreen() { FooScreen.base(this, 'constructor'); } senna.inherits(FooScreen, senna.Screen); FooScreen.prototype.cached = true; FooScreen.prototype.getSurfaceContent = function(surfaceId) { switch(surfaceId) { case 'header': return 'Header changed'; case 'body': return 'Body changed'; } }; {/literal} {literal} Senna - hello Header Body var app = new senna.App(); app.addSurfaces(['header', 'body']); app.addRoutes(new senna.Route('/foo', FooScreen)); {/literal} ","srcFilePath":"src/pages/docs/develop/jsAPI.md","url":"/docs/develop/jsAPI.html"}],"description":"Develop","icon":"apps","layout":"guide","title":"Develop","weight":4,"url":"/docs/develop/uiFeedback.html","content":"","srcFilePath":"src/pages/docs/develop/index.md","location":"/docs/develop"},{"description":"Documentation search description.","hidden":true,"title":"Documentation Search","content":" ","srcFilePath":"src/pages/docs/search.soy","url":"/docs/search.html"}]},{"title":"Updates","description":"Updates description.","updates":[{"version":"1.5.3","major":true,"features":[{"icon":"hammer","title":"fc64c80","description":"Reverts \"Waits until pending navigate is complete before removing screen\"","url":"https://github.com/liferay/senna.js/tree/v1.5.3"}]},{"version":"1.5.2","major":false,"features":[{"icon":"hammer","title":"2f76c9b","description":"Waits until pending navigate is complete before removing screen","url":"https://github.com/liferay/senna.js/tree/v1.5.2"}]},{"version":"1.5.0","major":true,"features":[{"icon":"hammer","title":"e311921","description":"Increases scroll capture debounce interval, fixes issue with navigate to HTTPS endpoint, and enables page to be flipped before resources have finished loading (IE11)","url":"https://github.com/liferay/senna.js/tree/v1.5.0"}]},{"version":"1.4.0","major":true,"features":[{"icon":"hammer","title":"6d96b71","description":"Adds debounce for storing scroll position to prevent lag","url":"https://github.com/liferay/senna.js/tree/v1.4.0"}]},{"version":"1.3.0","major":true,"features":[{"icon":"hammer","title":"faa03d7","description":"Changes implementation of biding events to capture navigation","url":"https://github.com/liferay/senna.js/tree/v1.3.0"}]},{"version":"1.2.0","major":true,"features":[{"icon":"hammer","title":"a35c7db","description":"Copies attributes from virtual document to documentElement after flip","url":"https://github.com/liferay/senna.js/tree/v1.2.0"}]},{"version":"1.1.0","major":true,"features":[{"icon":"hammer","title":"97d7eff","description":"Precompiles code to commonjs when published","url":"https://github.com/liferay/senna.js/tree/v1.1.0"}]},{"version":"1.0.4","major":false,"features":[{"icon":"hammer","title":"3c88ea7","description":"Fixes 302 redirect to same page will serve cached content on IE/Edge","url":"https://github.com/liferay/senna.js/tree/v1.0.4"}]},{"version":"1.0.3","major":false,"features":[{"icon":"hammer","title":"6d8e2c6","description":"Fixes bug with having \"/\" route with base path","url":"https://github.com/liferay/senna.js/tree/v1.0.3"}]},{"version":"1.0.2","major":false,"features":[{"icon":"hammer","title":"50d6398","description":"Mutate styles hrefs to be unique for IE to prevent caching issues","url":"https://github.com/liferay/senna.js/tree/v1.0.2"}]},{"version":"1.0.1","major":false,"features":[{"icon":"hammer","title":"f4bfef0","description":"Always set virtual document id to the same as document.body","url":"https://github.com/liferay/senna.js/tree/v1.0.1"}]},{"version":"1.0.0","major":true,"features":[{"icon":"hammer","title":"4f7844f","description":"Adds responseURL fallback for RequestScreen and removes url uniqueness before update history state","url":"https://github.com/liferay/senna.js/tree/v1.0.0"}]}],"content":" Released by Eduardo Lundgren Read more... ","srcFilePath":"src/pages/updates/index.soy","url":"/updates"}]},"repo":"https://github.com/Jonathan Lundy/senna-js"}